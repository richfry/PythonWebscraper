__author__ = 'Richard Fry'


import urllib2, urllib
import re
from bs4 import BeautifulSoup
#import csv
import unicodedata
import unicodecsv as csv

##http://www.burrows.co.uk/scripts_AA/db4_IBAA_09.dll/next_prev?PAGE=0&SID=40598917
##http://www.buburrows.co.uk/scripts_AA/db4_IBAA_09.dll/sf?who=**&what=&where=e.g.:+Lancaster+Road&sortby_=name&Searchbutton=Search&whatfrompopup=&SID=40598917


headers = ""
Companies = []

##Query the server to get the search results from the database
##Swansea
#URL = "http://www.burrows.co.uk/scripts/db4_ibaa_09.dll/setdb?database=307928"
##Bristol
#URL = "http://www.burrows.co.uk/scripts/db4_ibaa_09.dll/setdb?database=308139"

##Neath Port Talbot
URL = "http://www.npt-business.co.uk/default.aspx?page=3244"


headers = {
    'Host': 'www.npt-business.co.uk',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    'DNT': '1',
    'Referer': 'http://www.npt-business.co.uk/default.aspx?page=3244',
    'Cookie': 'ASP.NET_SessionId=yxghxszoj4zhofvxovcmz455; _ga=GA1.3.1279997152.1454064307; _gali=Template_ctl20_ctl00_Submit',
    'Connection': 'keep-alive'
}

data = {
    'Template$AutoId8$AutoId9$quickSearch':'Search',
'Template$RatingForm$Captcha':'',
'Template$RatingForm$txtDetail':'',
'Template$RatingForm$txtEmail':'',
'Template$RatingForm$txtEmailConfirm':'',
'Template$ctl20$ctl00$DropDownListPark':'',
'Template$ctl20$ctl00$DropDownListRange':'',
'Template$ctl20$ctl00$Submit':'Submit',
'Template$ctl20$ctl00$txtBusinessName':'',
'Template$sharebox$hidCC':'',
'Template$sharebox$hidCS':'',
'__EVENTARGUMENT':'',
'__EVENTTARGET':'',
'__EVENTVALIDATION':'/wEWTwL/2qf6DwK3ppvyBgK36fXEBQLWicCRBALSk66KDAKfmLvpCQKcuPTCBQL6ivXUAQLxsKHMDAKmhpflCAKowqpPAs+B56sMAouDvuEIApuQ290PAuKb7uAGAv7QwqAEAo6yv50CAo2hj8kMAr2WpsYLAqL9uuUCArrAj8IKAvjg9tULArbo7OgIArPvzo4GAseX3MsIAsfx34AGAt///a8KArTm5uEIAvWv44EHArqgkaYBAqPrut0BAtfG19APAvrD68QPAriIjssJAtvN34UFAo+AisoDAs7g9tgJAuKJ5KUBAvLmjsgNAvLmssgNAu3mjsgNAu3mssgNAuzmjsgNAuzmssgNAu/mjsgNAu/mssgNAu7mjsgNAunmjsgNAunmssgNAujmjsgNAujmssgNAuvmjsgNAuvmssgNAvrmjsgNAvrmssgNAri8rbYOArfQg9kHAoe9poUFAuKU16AFArmcsv8MAtjustUIAo7pgvAJAsLY1/APAoSm+Y4BAtmEjKEIAsHh1ugJAs+s8skNArialf0CAor02Z8PAq/SjIUOAvaHi+IIArjS9KoJAvT3jaUPAvDZuIkEAuCgltMMAqvytrgIAput180BAvjzg90MAte2hpsDGmTcdUhROHICew99ot6gTrpPRFM=',
'__VIEWSTATE':'',
'__VIEWSTATEGENERATOR':'CA0B0334'

}

data = urllib.urlencode(data)

req = urllib2.Request(URL,data, headers)
connection = urllib2.urlopen(req)
HTML = connection.read()
connection.close()

soup = BeautifulSoup(HTML)


#print(soup.prettify())


tables = soup.find_all("table")
#remove first table as is search table
tables.remove(tables[0])

for table in tables:
    details = ""
    cols = ""
    rows = table.find_all('tr')
    comps = table.find_all('caption')
    for c in comps:
        companyName = c.get_text(strip=True)
        details = companyName + ','
        cols = 'Company Name,'
        print(companyName)
    for row in rows:
        data = row.find_all('td')
        names = row.find_all('th')
        for d in data:
            details = details + d.get_text(strip=True) + ','
        for n in names:
            cols = cols + n.get_text(strip=True) + ','
    if len(Companies) != 0:

        Companies.append([details])
    else:
        Companies.append([cols])
        Companies.append([unicodedata.normalize('NFKD', details)])


with open("TravelToWork_NPT.csv", "wb") as f:
                writer = csv.writer(f, encoding='utf-8')
                writer.writerows(Companies)



